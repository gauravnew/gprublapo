Introduction
============

The client is based on a task based modularized design. There are multiple classes in each section and each of them performs functions which are called by other classes.

There are three independent subsets of the Client code:

    * Networking
    * Graphics
    * GameLogic

The Main module contains references to each of these subsets and manages their interaction.


Details
=======

The following section gives details of the functioning of each of the above mentioned subsets at a deeper level.

Networking
----------

This sub-section of the code logically contains the following files:

    * NetworkEngine.java
    * NetworkStreamParser.java
    * NetworkStreamWriter.java 

The network engine object extends Runnable which means that it is an independent thread.

The NetworkEngine object is responsible for interacting with the server on the clients behalf. The NetworkEngine has instances of NetworkStreamWriter and NetworkStreamParser which are the classes which actually understand the network protocol.  The NetworkEngine interfaces with them, performing different functions depending on network events that occur.

Specifically, NetworkEngine's runnable thread blocks for incoming network traffic.  Upon receiving it, it calls the appropriate NetworkStreamParser function to read the data based upon the opcode.  It also places that data in the proper places within the game logic and database.

Graphics
--------

This sub-section of the code logically contains the following files:

    * XCanvas.java
    * UIEngine.java
    * LoginScreen.java
    * LoadingScreen.java
    * GameMap.java
    * AnimatedSprite.java
    * Actor.java 

This is the largest subsection of the client code. All the objects part of this subsection are practically mutually exclusive; this means that they can operate independently of each other. Another thing as that each of there objects implement the Renderable interface which consists of the function void render().

Lets start with the AnimatedSprite? object. This object represents a series of images which are part of a continuous progression of frames. When this object is rendered on the screen it draws on every render the logical next frame in the series of the animation depending on the time that has elapsed since the last call to render. the result is a smooth animation displayed on the screen.

Each object of type Actor, amongst other status variables also contains 4 different AnimatedSprite? objects which serve as the view of the actor as seen from the LEFT, RIGHT, FRONT and BACK depending on which direction the actor is facing. Apart from this each actor contains its current position, the position that the actor is moving to, its name etc.

The GameMap object contains the actual map that is displayed on the screen and the map data used to detect the type of a tile on the map. This object has the ability to render this map to the screen given any coordinate set on the map that needs to be displayed at the center of the screen.

The LoadingScreen object represents a loading screen and calling its render function will display this loading screen.

The LoginScreen object represents a login screen and calling its render function will display this log-in screen. The screen asks the user for their name and the server IP. It then calls appropriate functions from the network engine to perform the actual log-in.

The UIEngine object is responsible for rendering the user interface displayed while the game is being played.

The XCanvas object extends java.awt.Panel and is responsible for updating the screen and receiving keyboard input/storing it. It calls functions witing GameLogic? every frame which in turn decide which Renderable objects need to be rendered and in what order calling their render function as required.

GameLogic
---------

This sub-section of the code logically contains the following files:

    * CoreGameLogic.java
    * ActorEngine.java 

This subsection contains all the graphics objects from the Graphics subsection and also contains an ActorEngine object.

The ActorEngine maintains a list of all actors that are currently present on the users screen and need to be displayed. It contains functions such as renderAll which calls the render function for each actor in the set. Actors which go off the screen are automatically deleted by the client (after confirmation by the server) since they are out of visible range and the client doesn't need to display them.???

This class has a state variable which represents the current state of the game.  The game could be in one of the following states:

    * LOGIN_STATE
    * LOADING_STATE
    * INGAME_STATE 

Depending on the state of the game the appropriate objects are created and rendered as and when required.

This class keeps track of global informations such as the name of the current client, the server IP address etc.

This class also receives keyboard input from the XCanvas object and processes it, performing the appropriate functions depending on the input.  (This almost always results in interfacing with the NetworkEngine to transmit key presses to the server).  Not much logic is needed besides that necessary to render and process input.  To reduce network traffic, the game logic will not request a move to a location where the player is not permitted to step.

Conclusion
==========

You should now have a basic understanding of the functioning of the game client. For more detailed information, refer to issue solution document for the client or comments in the code. Don't forget to update any related documentation before you make any changes to the code. 